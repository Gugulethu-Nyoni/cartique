generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ======================
// User & Auth Models
// ======================

model User {
  id                                Int         @id @default(autoincrement())
  access_level                      Int         @default(1)
  name                              String?
  surname                           String?
  email                             String      @unique
  password_hash                     String
  is_verified                       Boolean     @default(false)
  verification_token                String?     @db.VarChar(512)
  verification_token_expires_at     DateTime?
  reset_token                       String?     @db.VarChar(512)
  reset_token_expires_at            DateTime?
  last_login_at                     DateTime?
  failed_login_attempts             Int         @default(0)
  status                            UserStatus  @default(active)
  createdAt                         DateTime    @default(now()) @map("created_at")
  updatedAt                         DateTime    @default(now()) @updatedAt @map("updated_at")

  sessions                          Session[]
  authLogs                          AuthLog[]
  customer                          Customer?
  deliveries                        Delivery[]  @relation("DriverDeliveries")

  @@map("users")
}

model Session {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @map("user_id")
  token       String    @unique
  device_info String?   @map("device_info")
  ip_address  String?   @map("ip_address")
  is_revoked  Boolean   @default(false) @map("is_revoked")
  revoked_at  DateTime? @map("revoked_at")
  expires_at  DateTime  @map("expires_at")
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @updatedAt @map("updated_at")

  @@index([userId])
  @@index([token])
  @@index([expires_at])
  @@index([userId, is_revoked, expires_at], name: "idx_active_sessions")
  @@map("sessions")
}

model AuthLog {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @map("user_id")
  ip        String?   @map("ip_address")
  userAgent String?   @db.Text @map("user_agent")
  event     String    @map("action")
  createdAt DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([createdAt])
  @@map("auth_logs")
}

enum UserStatus {
  active
  locked
  suspended

  @@map("status")
}

// ======================
// Core Models
// ======================

model Product {
  id               Int               @id @default(autoincrement())
  sku              String?           @unique
  title            String
  slug             String            @unique
  description      String?
  shortDescription String?           @map("short_description")
  price            Decimal           @default(0.00)
  sale_price       Decimal?
  currency         String            @default("ZAR")
  status           ProductStatus     @default(draft)
  attributes       Json?
  metadata         Json?
  categories       ProductCategory[]
  variants         ProductVariant[]
  image            String?
  media            ProductMedia[]
  reviews          ProductReview[]
  orderItems       OrderItem[]
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at")

  @@index([slug])
  @@index([status])
}


model ProductCategory {
  id          Int               @id @default(autoincrement())
  name        String
  slug        String            @unique
  description String?
  parent_id   Int?              
  metadata    Json?
  sortOrder   Int               @default(0) @map("sort_order")
  parent      ProductCategory? @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children    ProductCategory[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @default(now()) @updatedAt @map("updated_at")

  @@index([slug])
  @@index([parent_id])
}

model ProductVariant {
  id                Int             @id @default(autoincrement())
  productId         Int             @map("product_id")
  product           Product         @relation(fields: [productId], references: [id])
  sku               String?         @unique
  attributes        Json?
  price             Float
  compareAtPrice    Float?          @map("compare_at_price")
  costPrice         Float?          @map("cost_price")
  inventoryQuantity Int             @default(0) @map("inventory_quantity")
  inventoryPolicy   InventoryPolicy @default(deny) @map("inventory_policy")
  barcode           String?
  weight            Float?
  dimensions        Json?
  inventoryItems    InventoryItem[]
  orderItems        OrderItem[]
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @default(now()) @updatedAt @map("updated_at")

  @@index([productId])
  @@index([sku])
}

model ProductMedia {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  url       String
  type      String
  altText   String?  @map("alt_text")
  sortOrder Int      @default(0) @map("sort_order")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([productId])
}

model ProductReview {
  id         Int       @id @default(autoincrement())
  productId  Int       @map("product_id")
  product    Product   @relation(fields: [productId], references: [id])
  customerId Int       @map("customer_id")
  customer   Customer  @relation(fields: [customerId], references: [id])
  rating     Int
  comment    String?   @db.Text
  status     String    @default("pending")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")

  @@index([productId])
  @@index([customerId])
  @@index([status])
}

// ======================
// Inventory
// ======================

model InventoryItem {
  id          Int                 @id @default(autoincrement())
  variantId   Int                 @map("variant_id")
  variant     ProductVariant      @relation(fields: [variantId], references: [id])
  sku         String?
  quantity    Int                 @default(0)
  status      InventoryStatus     @default(in_stock)
  locationId  Int?                @map("location_id")
  location    InventoryLocation?  @relation(fields: [locationId], references: [id])
  adjustments InventoryAdjustment[]
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @updatedAt @map("updated_at")

  @@index([variantId])
  @@index([status])
}

model InventoryAdjustment {
  id        Int      @id @default(autoincrement())
  itemId    Int      @map("item_id")
  item      InventoryItem @relation(fields: [itemId], references: [id])
  quantity  Int
  reason    String?
  type      String
  createdAt DateTime @default(now()) @map("created_at")

  @@index([itemId])
}

model InventoryLocation {
  id        Int             @id @default(autoincrement())
  name      String
  address   Json
  isPrimary Boolean         @default(false) @map("is_primary")
  items     InventoryItem[]
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @default(now()) @updatedAt @map("updated_at")
}

// ======================
// Orders
// ======================

model Order {
  id                Int                @id @default(autoincrement())
  orderNumber       String             @unique @map("order_number")
  customerId        Int?               @map("customer_id")
  customer          Customer?          @relation(fields: [customerId], references: [id])
  status            OrderStatus        @default(pending)
  currency          String
  subtotal          Float
  totalTax          Float              @default(0) @map("total_tax")
  totalShipping     Float              @default(0) @map("total_shipping")
  totalDiscounts    Float              @default(0) @map("total_discounts")
  total             Float
  billingAddress    Json               @map("billing_address")
  shippingAddress   Json               @map("shipping_address")
  metadata          Json?
  items             OrderItem[]
  fulfillments      OrderFulfillment[]
  payments          Payment[]
  deliveries        Delivery[]
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @default(now()) @updatedAt @map("updated_at")

  @@index([orderNumber])
  @@index([customerId])
  @@index([status])
}

model OrderItem {
  id                  Int             @id @default(autoincrement())
  orderId             Int             @map("order_id")
  order               Order           @relation(fields: [orderId], references: [id])
  productId           Int             @map("product_id")
  product             Product         @relation(fields: [productId], references: [id])
  variantId           Int?            @map("variant_id")
  variant             ProductVariant? @relation(fields: [variantId], references: [id])
  quantity            Int
  price               Float
  taxLines            Json?           @map("tax_lines")
  discountAllocations Json?           @map("discount_allocations")
  metadata            Json?
  createdAt           DateTime        @default(now()) @map("created_at")

  @@index([orderId])
}

model OrderFulfillment {
  id              Int       @id @default(autoincrement())
  orderId         Int       @map("order_id")
  order           Order     @relation(fields: [orderId], references: [id])
  status          FulfillmentStatus @default(pending)
  trackingNumber  String?   @map("tracking_number")
  shippingCarrier String?   @map("shipping_carrier")
  shippedAt       DateTime? @map("shipped_at")
  deliveredAt     DateTime? @map("delivered_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")

  @@index([orderId])
  @@index([status])
}

// ======================
// Deliveries
// ======================

model Delivery {
  id               Int             @id @default(autoincrement())
  orderId          Int             @map("order_id")
  order            Order           @relation(fields: [orderId], references: [id])
  customerId       Int?            @map("customer_id")
  customer         Customer?       @relation(fields: [customerId], references: [id])
  trackingNumber   String?         @map("tracking_number")
  carrier          String?         @map("carrier")
  status           DeliveryStatus  @default(pending)
  estimatedDate    DateTime?       @map("estimated_date")
  actualDate       DateTime?       @map("actual_date")
  deliveryAddress  Json            @map("delivery_address")
  notes            String?
  driverId         Int?            @map("driver_id")
  driver           User?           @relation("DriverDeliveries", fields: [driverId], references: [id])
  proofOfDelivery  String?         @map("proof_of_delivery")
  metadata         Json?
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @updatedAt @map("updated_at")

  @@index([orderId])
  @@index([customerId])
  @@index([status])
  @@index([driverId])
}

enum DeliveryStatus {
  pending
  processing
  in_transit
  out_for_delivery
  delivered
  failed
  returned
}

// ======================
// Payments
// ======================

model Payment {
  id              Int           @id @default(autoincrement())
  orderId         Int           @map("order_id")
  order           Order         @relation(fields: [orderId], references: [id])
  amount          Float
  currency        String
  paymentMethod   String        @map("payment_method")
  paymentGateway  String        @map("payment_gateway")
  status          PaymentStatus @default(pending)
  transactionId   String?       @map("transaction_id")
  metadata        Json?
  refunds         Refund[]
  createdAt       DateTime      @default(now()) @map("created_at")

  @@index([orderId])
  @@index([status])
  @@index([transactionId])
}

model Refund {
  id        Int      @id @default(autoincrement())
  paymentId Int      @map("payment_id")
  payment   Payment  @relation(fields: [paymentId], references: [id])
  amount    Float
  reason    String?
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")

  @@index([paymentId])
}

// ======================
// Customers
// ======================

model Customer {
  id                     Int               @id @default(autoincrement())
  userId                 Int?              @unique @map("user_id")
  user                   User?             @relation(fields: [userId], references: [id])
  phone                  String?
  defaultBillingAddress  Json?             @map("default_billing_address")
  defaultShippingAddress Json?             @map("default_shipping_address")
  metadata               Json?
  loyaltyPoints          Int               @default(0) @map("loyalty_points")
  addresses              CustomerAddress[]
  orders                 Order[]
  reviews                ProductReview[]
  deliveries             Delivery[]
  createdAt              DateTime          @default(now()) @map("created_at")
  updatedAt              DateTime          @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
}

model CustomerAddress {
  id                Int      @id @default(autoincrement())
  customerId        Int      @map("customer_id")
  customer          Customer @relation(fields: [customerId], references: [id])
  isDefaultBilling  Boolean  @default(false) @map("is_default_billing")
  isDefaultShipping Boolean  @default(false) @map("is_default_shipping")
  firstName         String?  @map("first_name")
  lastName          String?  @map("last_name")
  company           String?
  addressLine1      String?  @map("address_line1")
  addressLine2      String?  @map("address_line2")
  city              String?
  state             String?
  postalCode        String?  @map("postal_code")
  country           String?
  phone             String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([customerId])
}

// ======================
// Settings
// ======================

model Settings {
  id                      Int       @id @default(autoincrement())
  storeName               String    @default("My Store") @map("store_name")
  storeEmail              String?   @map("store_email")
  storePhone              String?   @map("store_phone")
  storeLogoUrl            String?   @map("store_logo_url")
  defaultCurrency         String    @default("USD") @map("default_currency")
  availableCurrencies     Json      @map("available_currencies")
  timezone                String    @default("UTC")
  locale                  String    @default("en-US")
  warehouses              Json      @map("warehouses")
  pickupLocations         Json      @map("pickup_locations")
  defaultWarehouseId      Int?      @map("default_warehouse_id")
  autoArchiveOrdersDays   Int       @default(30) @map("auto_archive_orders_days")
  requireOrderApproval    Boolean   @default(false) @map("require_order_approval")
  lowStockThreshold       Int       @default(5) @map("low_stock_threshold")
  defaultPaymentGateway   String?   @map("default_payment_gateway")
  paymentGateways         Json      @map("payment_gateways")
  checkoutFields          Json      @map("checkout_fields")
  notificationSettings    Json      @map("notification_settings")
  isMaintenanceMode       Boolean   @default(false) @map("is_maintenance_mode")
  maintenanceMessage      String?   @map("maintenance_message")
  apiSettings             Json      @map("api_settings")
  webhookUrls             Json      @map("webhook_urls")
  metadata                Json?
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @default(now()) @updatedAt @map("updated_at")

  @@index([defaultWarehouseId])
}

model Car {
  id        Int      @id @default(autoincrement())
  make      String   
  model     String   
  year      Int      
  color     String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model DriverLocation {
  id        Int      @id @default(autoincrement())
  driverId  Int
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
}




// ======================
// Enums
// ======================

enum ProductStatus {
  draft
  active
  archived
}

enum InventoryPolicy {
  deny
  continue
}

enum InventoryStatus {
  in_stock
  out_of_stock
  backordered
}

enum OrderStatus {
  pending
  processing
  completed
  cancelled
  refunded
}

enum PaymentStatus {
  pending
  authorized
  paid
  failed
  refunded
}

enum FulfillmentStatus {
  pending
  in_transit
  delivered
  failed
}